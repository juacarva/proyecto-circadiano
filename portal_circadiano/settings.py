"""
Django settings for portal_circadiano project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

# Cargar las variables de entorno del archivo .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- INICIO: CONFIGURACIÓN DE SEGURIDAD Y ENTORNO ---

# La SECRET_KEY se lee desde las variables de entorno. Falla si no existe en producción.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# DEBUG se desactiva en producción leyendo una variable de entorno.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# Configuración de hosts permitidos
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

if not DEBUG:
    HEROKU_APP_NAME = os.environ.get('HEROKU_APP_NAME')
    if HEROKU_APP_NAME:
        ALLOWED_HOSTS.extend([
            f"{HEROKU_APP_NAME}.herokuapp.com",
            # Añadimos la URL específica de tu app por si acaso
            f"{HEROKU_APP_NAME}-c1ec05eba808.herokuapp.com", 
            "circadiandos.cl",
            "www.circadiandos.cl",
        ])
    # Permite CUALQUIER subdominio de herokuapp.com de forma segura
    ALLOWED_HOSTS.append('.herokuapp.com')

# --- FIN: CONFIGURACIÓN DE SEGURIDAD Y ENTORNO ---


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'blog_circadiano',
    'usuarios.apps.UsuariosConfig',
    'widget_tweaks',
    'mensajeria',
    'ckeditor',
    'ckeditor_uploader',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portal_circadiano.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mensajeria.context_processors.unread_messages_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'portal_circadiano.wsgi.application'


# --- INICIO: BASE DE DATOS Y ARCHIVOS ---

# Configuración de base de datos 100% desde la variable de entorno DATABASE_URL.
DATABASES = {
    'default': dj_database_url.config(conn_max_age=600, ssl_require=not DEBUG)
}

# Static & Media Files
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles_collected'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# --- FIN: BASE DE DATOS Y ARCHIVOS ---


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- INICIO: ALLAUTH Y CORREO ---

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER_GMAIL')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD_GMAIL')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER_GMAIL')

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = 'account_login'
LOGOUT_REDIRECT_URL = '/'

SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_FORMS = {'signup': 'usuarios.forms.CustomSignupForm'}
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_MESSAGES_ENABLED = False

SOCIALACCOUNT_ADAPTER = 'usuarios.adapters.CustomSocialAccountAdapter'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# --- FIN: ALLAUTH Y CORREO ---

CKEDITOR_UPLOAD_PATH = "uploads/"
"""
Django settings for portal_circadiano project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url # <-- CAMBIO: Importado para la base de datos de Heroku
from dotenv import load_dotenv

# Cargar las variables de entorno del archivo .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# CAMBIO: La SECRET_KEY se lee desde las variables de entorno para mayor seguridad.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# CAMBIO: DEBUG se desactiva en producción leyendo una variable de entorno.
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'

# settings.py
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

HEROKU_APP_NAME = os.environ.get('HEROKU_APP_NAME')
if HEROKU_APP_NAME:
    # Permite el dominio base de herokuapp y tus dominios personalizados
    ALLOWED_HOSTS.extend([
        f"{HEROKU_APP_NAME}.herokuapp.com",
        "circadiandos.cl",
        "www.circadiandos.cl"
    ])

# La URL que te dio el error tiene un formato nuevo. 
# Añadimos una capa extra para permitir CUALQUIER subdominio de herokuapp.com
# Esto es seguro siempre que confíes en la plataforma de Heroku.
ALLOWED_HOSTS.append('.herokuapp.com')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # <-- CAMBIO: Añadido para Whitenoise
    'django.contrib.staticfiles',

    'django.contrib.sites',

    # Apps de allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Mis Apps
    'blog_circadiano',
    'usuarios.apps.UsuariosConfig',
    'widget_tweaks',
    'mensajeria',

    'ckeditor',
    'ckeditor_uploader',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # <-- CAMBIO: Añadido para servir archivos estáticos
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portal_circadiano.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mensajeria.context_processors.unread_messages_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'portal_circadiano.wsgi.application'


# Database
# CAMBIO: Configuración de base de datos flexible para Heroku y local.
DATABASES = {
    'default': dj_database_url.config(
        default='postgres://jpcarvajal:peumino2020@localhost/portal_circadiano',
        conn_max_age=600,
        ssl_require=not DEBUG # <-- ¡Este es el cambio clave!
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
LANGUAGE_CODE = 'es'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static & Media Files
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles_collected'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# CAMBIO: Configuración de almacenamiento para Whitenoise en producción.

STORAGES = {
    # Almacenamiento para archivos de media (subidas de usuarios)
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # Almacenamiento para archivos estáticos (CSS, JS)
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Bloque de Configuración de Autenticación y Allauth (sin cambios) ---

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER_GMAIL')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD_GMAIL')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER_GMAIL')

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = 'account_login'
LOGOUT_REDIRECT_URL = '/'

SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_FORMS = {'signup': 'usuarios.forms.CustomSignupForm'}
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_MESSAGES_ENABLED = False

SOCIALACCOUNT_ADAPTER = 'usuarios.adapters.CustomSocialAccountAdapter'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

CKEDITOR_UPLOAD_PATH = "uploads/"